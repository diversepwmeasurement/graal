concurrency:
  cancel-in-progress: ${{ github.event_name == 'pull_request' || github.repository
    != 'oracle/graal' }}
  group: workflow = ${{ github.workflow }}, ref = ${{ github.event.ref }}, pr = ${{
    github.event.pull_request.id }}
env:
  JAVA_HOME: ${{ github.workspace }}/jdk
  JDT: builtin
  LANG: en_US.UTF-8
  MX_GIT_CACHE: refcache
  MX_PATH: ${{ github.workspace }}/mx
  MX_PYTHON: python3.8
  NATIVE_IMAGE_EXPERIMENTAL_OPTIONS_ARE_FATAL: 'true'
jobs:
  build-graalvm-linux:
    env:
      MX_RUNS_DEBUG: ${{ contains(matrix.env.GATE_TAGS, 'debug') || matrix.env.GATE_TAGS
        == '' }}
      MX_RUNS_STYLE: ${{ contains(matrix.env.GATE_TAGS, 'style') || matrix.env.GATE_TAGS
        == '' }}
    name: /${{ matrix.env.PRIMARY }} ${{ matrix.env.GATE_TAGS }} JDK${{ matrix.env.JDK_VERSION
      }}
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Checkout oracle/graal
      uses: actions/checkout@v4
      with:
        fetch-depth: ${{ env.MX_RUNS_STYLE && '0' || '1' }}
        ref: ${{ github.ref }}
    - continue-on-error: true
      name: Determine mx version
      run: echo "MX_VERSION=$(jq -r '.mx_version' common.json)" >> ${GITHUB_ENV}
    - continue-on-error: true
      name: Checkout graalvm/mx
      uses: actions/checkout@v4
      with:
        path: ${{ env.MX_PATH }}
        ref: ${{ env.MX_VERSION }}
        repository: graalvm/mx.git
    - continue-on-error: true
      name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.8'
    - continue-on-error: true
      name: Update mx cache
      uses: actions/cache@v4
      with:
        key: ${{ runner.os }}-mx-${{ hashFiles('**/suite.py') }}
        path: ~/.mx
        restore-keys: ${{ runner.os }}-mx-
    - continue-on-error: true
      env: ${{ matrix.env }}
      name: Fetch LabsJDK
      run: 'mkdir jdk-dl

        ${MX_PATH}/mx --java-home= fetch-jdk --jdk-id labsjdk-ce-${JDK_VERSION} --to
        jdk-dl --alias ${JAVA_HOME}

        '
    - continue-on-error: true
      if: ${{ env.MX_RUNS_DEBUG == 'true' || env.MX_RUNS_STYLE == 'true' }}
      name: Update dependency cache
      run: sudo apt update
    - continue-on-error: true
      if: ${{ env.MX_RUNS_DEBUG == 'true' }}
      name: Install debug dependencies
      run: sudo apt install gdb
    - continue-on-error: true
      if: ${{ env.MX_RUNS_STYLE == 'true' }}
      name: Install style dependencies
      run: 'sudo apt install python3-pip python-setuptools

        sudo pip install $(jq -r ''[.pip | to_entries[] | join("")] | join(" ")''
        common.json)

        '
    - continue-on-error: true
      if: ${{ matrix.env.PIP_PACKAGES != '' }}
      name: Install additional pip packages
      run: ${MX_PYTHON} -m pip install ${{ matrix.env.PIP_PACKAGES }}
    - continue-on-error: true
      if: ${{ env.MX_RUNS_STYLE == 'true' }}
      name: Download Eclipse
      run: 'ECLIPSE_TAR=eclipse.tar.gz

        ECLIPSE_ORG_VERSION=$(jq -r ''.eclipse.short_version'' common.json)

        ECLIPSE_ORG_TIMESTAMP=$(jq -r ''.eclipse.timestamp'' common.json)

        wget --no-verbose https://archive.eclipse.org/eclipse/downloads/drops4/R-${ECLIPSE_ORG_VERSION}-${ECLIPSE_ORG_TIMESTAMP}/eclipse-SDK-${ECLIPSE_ORG_VERSION}-linux-gtk-x86_64.tar.gz
        -O $ECLIPSE_TAR

        tar -xzf ${ECLIPSE_TAR}

        echo "ECLIPSE_EXE=${PWD}/eclipse/eclipse" >> $GITHUB_ENV

        '
    - continue-on-error: true
      if: ${{ matrix.env.WITHOUT_VCS }}
      name: Remove .git directory
      run: rm -rf .git
    - continue-on-error: true
      env: ${{ matrix.env }}
      if: ${{ matrix.env.GATE_TAGS != '' }}
      name: Build GraalVM and run gate with tags
      run: ${MX_PATH}/mx --primary-suite-path ${PRIMARY} --java-home=${JAVA_HOME}
        gate --strict-mode ${{ matrix.env.GATE_OPTS }} --tags ${GATE_TAGS}
    - continue-on-error: true
      env: ${{ matrix.env }}
      if: ${{ matrix.env.GATE_TAGS == '' }}
      name: Build GraalVM and run gate without tags
      run: ${MX_PATH}/mx --primary-suite-path ${PRIMARY} --java-home=${JAVA_HOME}
        gate --strict-mode ${{ matrix.env.GATE_OPTS }}
    strategy:
      fail-fast: false
      matrix:
        include:
        - env:
            GATE_TAGS: style,fullbuild,test
            JDK_VERSION: '21'
            PRIMARY: compiler
        - env:
            GATE_TAGS: build,bootstraplite
            JDK_VERSION: latest
            PRIMARY: compiler
        - env:
            GATE_TAGS: style,fullbuild
            JDK_VERSION: '21'
            PRIMARY: espresso
        - env:
            GATE_TAGS: style,fullbuild
            JDK_VERSION: '21'
            PRIMARY: substratevm
        - env:
            GATE_TAGS: build,helloworld,native_unittests
            JDK_VERSION: latest
            PIP_PACKAGES: jsonschema==4.6.1
            PRIMARY: substratevm
        - env:
            GATE_TAGS: build,debuginfotest
            JDK_VERSION: latest
            PRIMARY: substratevm
        - env:
            GATE_TAGS: hellomodule
            JDK_VERSION: latest
            PRIMARY: substratevm
        - env:
            GATE_TAGS: style,fullbuild,sulongBasic
            JDK_VERSION: '21'
            PRIMARY: sulong
        - env:
            GATE_TAGS: ''
            JDK_VERSION: '21'
            PRIMARY: truffle
        - env:
            DISABLE_LIBPOLYGLOT: true
            DISABLE_POLYGLOT: true
            DYNAMIC_IMPORTS: /sulong,/substratevm
            GATE_OPTS: --no-warning-as-error
            GATE_TAGS: build,sulong
            JDK_VERSION: latest
            NATIVE_IMAGES: graalvm-native-binutil,graalvm-native-clang,graalvm-native-clang-cl,graalvm-native-clang++,graalvm-native-ld,lib:llvmvm
            PRIMARY: vm
        - env:
            DYNAMIC_IMPORTS: /tools,/substratevm,/sulong
            GATE_OPTS: --no-warning-as-error
            GATE_TAGS: build
            JDK_VERSION: latest
            NATIVE_IMAGES: lib:jvmcicompiler,native-image,lib:native-image-agent,lib:native-image-diagnostics-agent,polyglot
            PRIMARY: vm
            WITHOUT_VCS: true
    timeout-minutes: 60
  build-graalvm-windows:
    env:
      MX_PYTHON: python
    name: /substratevm on Windows
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Checkout oracle/graal
      uses: actions/checkout@v4
      with:
        ref: ${{ github.ref }}
    - continue-on-error: true
      name: Determine mx version
      run: echo "MX_VERSION=$(jq -r '.mx_version' common.json)" >> ${GITHUB_ENV}
      shell: bash
    - continue-on-error: true
      name: Checkout graalvm/mx
      uses: actions/checkout@v4
      with:
        path: ${{ env.MX_PATH }}
        ref: ${{ env.MX_VERSION }}
        repository: graalvm/mx.git
    - continue-on-error: true
      name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.8'
    - continue-on-error: true
      name: Fetch LabsJDK
      run: 'mkdir jdk-dl

        ${MX_PATH}/mx --java-home= fetch-jdk --jdk-id labsjdk-ce-latest --to jdk-dl
        --alias ${JAVA_HOME}

        '
      shell: bash
    - continue-on-error: true
      name: Build GraalVM via cmd.exe
      run: 'call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat"
        x64

        call ${{ env.MX_PATH }}\mx.cmd -p substratevm --native-images=native-image
        --components="Native Image" build

        call ${{ env.MX_PATH }}\mx.cmd -p substratevm --native-images=native-image
        --components="Native Image" graalvm-home > graalvm-home-with-forward-slashes.txt

        set /p GRAALVM_HOME=<graalvm-home-with-forward-slashes.txt

        setlocal enabledelayedexpansion

        set "GRAALVM_HOME=%GRAALVM_HOME:/=\%"

        echo %GRAALVM_HOME%\bin>>%GITHUB_PATH%

        echo GRAALVM_HOME=%GRAALVM_HOME%>>%GITHUB_ENV%

        '
      shell: cmd
    - continue-on-error: true
      name: Test GraalVM
      run: 'native-image --version

        native-image -m jdk.httpserver

        '
    timeout-minutes: 60
name: GraalVM Gate
on:
  repository_dispatch:
    types: trigger-ga___main.yml
permissions:
  contents: read
